input {
  redis {
    password => "<%= ENV['REDIS_PASSWORD'] %>"
    key => "filebeat"
    db => 1
    data_type => "list"
  }
}
filter {
  # Rewrite the @timestamp field from the time field in the Docker logs.
  date {
    match => [ "time", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS'Z'" ]
  }
  grok {
    match => ["container", "(?<container_short>.{12})"]
  }
  # This has to come before any actions on the "message" field, otherwise
  # the log field containing offset and file path will be overwritten
  # by the actual log message.
  mutate {
    rename => {
      "[log][offset]" => "offset"
      "[log][file][path]" => "file"
      "container_short" => "host"
    }
  }
  json {
    source => "message"
  }
  mutate {
    remove_field => ['agent', 'ecs', 'input', 'message']
  }
  <%= ENV['LOGSTASH_FILTERS'] || "" %>
}
output {
  <%=
    # The block is only called if there is a match, which ensures we crash
    # if __LOAD_SCRIPT_SHA__ was provided but not LOAD_SCRIPT_SHA, but proceed
    # without error if __LOAD_SCRIPT_SHA__ was not provided.
    (ENV['LOGSTASH_OUTPUT_CONFIG'] || "stdout { codec => rubydebug }")
    .gsub('__LOAD_SCRIPT_SHA__') { |_| ENV.fetch('LOAD_SCRIPT_SHA') }
  %>
}
